-- | Comprehensive tests for Bilateral agreements
module Options.TestBilateral where

import DA.Date
import DA.Time

import Daml.Script

import Options.Bilateral

-- Test parties
data TestParties = TestParties with
  user : Party
  mm : Party  -- market maker
  dso : Party

-- Setup test environment
setupTestParties : Script TestParties
setupTestParties = do
  user <- allocateParty "User"
  mm <- allocateParty "MarketMaker" 
  dso <- allocateParty "DSO"
  return TestParties{..}

-- Test 1: Complete bilateral agreement flow (request -> accept -> use)
testBilateralFlow : Script ()
testBilateralFlow = do
  TestParties{..} <- setupTestParties
  
  -- Create bilateral request
  let params = BilateralParams with description = "Trading agreement for options market making"
  let expiresAt = time (date 2024 Dec 31) 23 59 59
  
  requestId <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt
      params
      
  -- MM accepts the request
  _ <- submit mm do
    exerciseCmd requestId BilateralRequest_Accept
    
  -- Bilateral agreement created successfully (bilateralId is valid)
  return ()

-- Test 2: Request rejection and cancellation
testBilateralRejectCancel : Script ()
testBilateralRejectCancel = do
  TestParties{..} <- setupTestParties
  
  let params = BilateralParams with description = "Test agreement"
  let expiresAt = time (date 2024 Dec 31) 23 59 59
  
  -- Test rejection
  requestId1 <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt
      params
      
  submit mm do
    exerciseCmd requestId1 (BilateralRequest_Reject "Not interested in this agreement")
    
  -- Test cancellation 
  requestId2 <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt
      params
      
  submit user do
    exerciseCmd requestId2 BilateralRequest_Cancel

-- Test 3: Bilateral agreement extension
testBilateralExtension : Script ()
testBilateralExtension = do
  TestParties{..} <- setupTestParties
  
  let params = BilateralParams with description = "Agreement to be extended"
  let initialExpiry = time (date 2024 Jun 30) 23 59 59
  let newExpiry = time (date 2024 Dec 31) 23 59 59
  
  -- Create and accept bilateral agreement
  requestId <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt = initialExpiry
      params
      
  bilateralId <- submit mm do
    exerciseCmd requestId BilateralRequest_Accept
    
  -- Create extension request
  extensionRequestId <- submitMulti [user, mm] [] do
    exerciseCmd bilateralId (Bilateral_Extend newExpiry "Extending for additional 6 months")
    
  -- Accept extension
  _ <- submitMulti [user, mm] [] do
    exerciseCmd extensionRequestId BilateralExtensionRequest_Accept
    
  -- Extension completed successfully (newBilateralId is valid)
  return ()

-- Test 4: Agreement cancellation and expiration
testBilateralCancelExpire : Script ()
testBilateralCancelExpire = do
  TestParties{..} <- setupTestParties
  
  let params = BilateralParams with description = "Agreement to be cancelled"
  let expiresAt = time (date 2024 Dec 31) 23 59 59
  
  -- Create bilateral agreement
  requestId <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt
      params
      
  bilateralId <- submit mm do
    exerciseCmd requestId BilateralRequest_Accept
    
  -- Test two-step cancellation: user requests cancel, mm accepts
  cancelReqId <- submit user do
    exerciseCmd bilateralId (Bilateral_RequestCancel user "No longer needed")
  submit mm do
    exerciseCmd cancelReqId BilateralCancelRequest_Accept
    
  -- Create another agreement that we'll let expire naturally
  requestId2 <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt = time (date 1970 Jan 2) 0 0 0  -- Expires in 1 day
      params
      
  bilateralId2 <- submit mm do
    exerciseCmd requestId2 BilateralRequest_Accept
    
  -- Advance time past the expiration date
  passTime (days 2)
    
  -- Test expiration (should work since date is in past)
  submit user do
    exerciseCmd bilateralId2 (Bilateral_Expire user)

-- Test 5: Extension request cancellation
testExtensionCancel : Script ()
testExtensionCancel = do
  TestParties{..} <- setupTestParties
  
  let params = BilateralParams with description = "Agreement for extension cancel test"
  let initialExpiry = time (date 2024 Jun 30) 23 59 59
  let newExpiry = time (date 2024 Dec 31) 23 59 59
  
  -- Create bilateral agreement
  requestId <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt = initialExpiry
      params
      
  bilateralId <- submit mm do
    exerciseCmd requestId BilateralRequest_Accept
    
  -- Create extension request
  extensionRequestId <- submitMulti [user, mm] [] do
    exerciseCmd bilateralId (Bilateral_Extend newExpiry "Extension to be cancelled")
    
  -- Cancel extension request
  submit user do
    exerciseCmd extensionRequestId (BilateralExtensionRequest_Cancel user)

-- Test 6: Privacy - other parties cannot see bilateral agreements
testBilateralPrivacy : Script ()
testBilateralPrivacy = do
  TestParties{..} <- setupTestParties
  _outsider <- allocateParty "Outsider"  -- Party not involved in any agreements
  
  let params = BilateralParams with description = "Private agreement"
  let expiresAt = time (date 2024 Dec 31) 23 59 59
  
  -- Create bilateral agreement between user and mm
  requestId <- submit user do
    createCmd BilateralRequest with
      user, mm, dso
      expiresAt
      params
      
  _ <- submit mm do
    exerciseCmd requestId BilateralRequest_Accept
    
  -- Outsider should NOT be able to query for this bilateral agreement
  -- Note: In a real test environment, this would fail if privacy is working
  -- Here we just verify the setup is correct - the actual privacy enforcement
  -- happens at the ledger/participant level
  
  return ()

-- Helper: create a bilateral between user and mm
createBilateral : TestParties -> BilateralParams -> Time -> Script (ContractId Bilateral)
createBilateral TestParties{..} params expiresAt = do
  requestId <- submit user do
    createCmd BilateralRequest with user, mm, dso, expiresAt, params
  submit mm do
    exerciseCmd requestId BilateralRequest_Accept

-- Test: cancel request accepted by counterparty archives agreement
testBilateralCancelAccept : Script ()
testBilateralCancelAccept = do
  parties@TestParties{..} <- setupTestParties
  let params = BilateralParams with description = "Cancel accept test"
  let expiresAt = time (date 2025 Dec 31) 23 59 59
  bilateralId <- createBilateral parties params expiresAt
  cancelReqId <- submit user do
    exerciseCmd bilateralId (Bilateral_RequestCancel user "No longer needed")
  submit mm do
    exerciseCmd cancelReqId BilateralCancelRequest_Accept
  bilateralsAfter <- query @Bilateral user
  assertMsg "Agreement should be archived after accept" (length bilateralsAfter == 0)

-- Test: cancel request rejected by counterparty keeps agreement active
testBilateralCancelReject : Script ()
testBilateralCancelReject = do
  parties@TestParties{..} <- setupTestParties
  let params = BilateralParams with description = "Cancel reject test"
  let expiresAt = time (date 2025 Dec 31) 23 59 59
  bilateralId <- createBilateral parties params expiresAt
  cancelReqId <- submit user do
    exerciseCmd bilateralId (Bilateral_RequestCancel user "Not acceptable")
  submit mm do
    exerciseCmd cancelReqId BilateralCancelRequest_Reject
  bilateralsAfter <- query @Bilateral user
  assertMsg "Agreement should remain after reject" (length bilateralsAfter == 1)

-- Test: cancel request withdrawn by initiator keeps agreement active
testBilateralCancelWithdraw : Script ()
testBilateralCancelWithdraw = do
  parties@TestParties{..} <- setupTestParties
  let params = BilateralParams with description = "Cancel withdraw test"
  let expiresAt = time (date 2025 Dec 31) 23 59 59
  bilateralId <- createBilateral parties params expiresAt
  cancelReqId <- submit user do
    exerciseCmd bilateralId (Bilateral_RequestCancel user "Created by mistake")
  submit user do
    exerciseCmd cancelReqId BilateralCancelRequest_Withdraw
  bilateralsAfter <- query @Bilateral user
  assertMsg "Agreement should remain after withdraw" (length bilateralsAfter == 1)

-- Main test runner - runs all tests
runAllBilateralTests : Script ()
runAllBilateralTests = do
  testBilateralFlow
  testBilateralRejectCancel
  testBilateralExtension
  testBilateralCancelExpire
  testExtensionCancel
  testBilateralPrivacy
  testBilateralCancelAccept
  testBilateralCancelReject
  testBilateralCancelWithdraw
  
  -- Success message
  debug "All bilateral agreement tests passed successfully!"
